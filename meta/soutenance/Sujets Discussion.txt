ğŸ”¹ Le Web SÃ©mantique

    Utilisation de balises HTML qui donnent du sens au contenu (ex : <header>, <article>, <section>, <footer>).
    Meilleure accessibilitÃ© pour les lecteurs d'Ã©cran et le SEO (rÃ©fÃ©rencement).
    Facilite la maintenance et la comprÃ©hension du code.

ğŸ”¹ Lâ€™importance des validateurs

    W3C HTML Validator & W3C CSS Validator = DÃ©tection des erreurs, amÃ©lioration de la compatibilitÃ© et des performances.

ğŸ”¹ Le fonctionnement de l'IDE

    Auto-complÃ©tion, Formatage automatique, Utilisation de linters (ex : ESLint, Prettier), Debug intÃ©grÃ©
    Utilisation de plugins pour amÃ©liorer la productivitÃ© (ex : Live Server).

ğŸ”¹ La spÃ©cificitÃ© en CSS

    La spÃ©cificitÃ© dÃ©termine quelle rÃ¨gle CSS sâ€™applique en cas de conflit :
        !important (le plus fort) (Ã  Ã©viter)
        SÃ©lecteur inline (style="color: red;") â†’ Poids Ã©levÃ© (mauvaise pratique)
        ID (#monId) â†’ SpÃ©cificitÃ© forte
        Classe/Pseudo-classe (.maClasse, :hover) â†’ SpÃ©cificitÃ© moyenne
        Ã‰lÃ©ment (div, p) â†’ SpÃ©cificitÃ© faible

ğŸ”¹ Lâ€™Ã©tude et la dÃ©coupe de la maquette

    Ã‰tapes :
        Analyser la maquette (typographie, couleurs, espacement, hiÃ©rarchie).
        Identifier les blocs principaux (header, sections, footer).
        DÃ©finir une grille (Flexbox, Grid).
        CrÃ©er des composants rÃ©utilisables (boutons, cartes, formulaires).

ğŸ”¹ Lâ€™importance de sÃ©parer le HTML du CSS

    Facilite la maintenance et la rÃ©utilisation du code.
    Meilleure organisation avec des fichiers sÃ©parÃ©s (index.html, style.css).
    AmÃ©liore les performances en mettant le CSS en cache.